// 1111111111111111111111111111111111111111111111111
// 1111111111111111111111111111111111111111111111111
Node *rotateRight(Node *root)
{
    Node *newRoot = root->pLeft;
    Node *transferSubtree = newRoot->pRight;

    newRoot->pRight = root;
    root->pLeft = transferSubtree;

    root->balance = BalanceValue(max(getHeightRec(root->pLeft), getHeightRec(root->pRight)) + 1);
    newRoot->balance = BalanceValue(max(getHeightRec(newRoot->pLeft), getHeightRec(newRoot->pRight)) + 1);

    return newRoot;
}

Node *rotateLeft(Node *root)
{
    Node *newRoot = root->pRight;
    Node *transferSubtree = newRoot->pLeft;

    newRoot->pLeft = root;
    root->pRight = transferSubtree;

    root->balance = BalanceValue(max(getHeightRec(root->pLeft), getHeightRec(root->pRight)) + 1);
    newRoot->balance = BalanceValue(max(getHeightRec(newRoot->pLeft), getHeightRec(newRoot->pRight)) + 1);

    return newRoot;
}

// 2222222222222222222222222222222222222222222222222
// 2222222222222222222222222222222222222222222222222

Node *rotateLeft(Node *node)
{
    Node *temp = node->pRight;
    node->pRight = temp->pLeft;
    temp->pLeft = node;
    return temp;
}

Node *rotateRight(Node *node)
{
    Node *temp = node->pLeft;
    node->pLeft = temp->pRight;
    temp->pRight = node;
    return temp;
}

int getBalance(Node *node)
{
    if (node == NULL)
        return 0;
    return getHeightRec(node->pLeft) - getHeightRec(node->pRight);
}

Node *insertRec(Node *node, T value)
{
    if (node == NULL)
        return new Node(value);
    if (value < node->data)
        node->pLeft = insertRec(node->pLeft, value);
    else if (value > node->data)
        node->pRight = insertRec(node->pRight, value);
    else
        return node;

    int balance = getBalance(node);

    if (balance > 1 && value < node->pLeft->data)
        return rotateRight(node);

    if (balance < -1 && value > node->pRight->data)
        return rotateLeft(node);

    if (balance > 1 && value > node->pLeft->data)
    {
        node->pLeft = rotateLeft(node->pLeft);
        return rotateRight(node);
    }

    if (balance < -1 && value < node->pRight->data)
    {
        node->pRight = rotateRight(node->pRight);
        return rotateLeft(node);
    }

    return node;
}

void insert(const T &value)
{
    root = insertRec(root, value);
}

// 3333333333333333333333333333333333333333333333333
// 3333333333333333333333333333333333333333333333333
void rotateLeft(Node *&root)
{
    Node *tempPtr = root->pRight;
    root->pRight = tempPtr->pLeft;
    tempPtr->pLeft = root;
    root = tempPtr;
}

void rotateRight(Node *&root)
{
    Node *tempPtr = root->pLeft;
    root->pLeft = tempPtr->pRight;
    tempPtr->pRight = root;
    root = tempPtr;
}

int getHeight(Node *node)
{
    if (node == NULL)
        return 0;
    int lh = getHeight(node->pLeft);
    int rh = getHeight(node->pRight);
    return (lh > rh ? lh : rh) + 1;
}

void balance(Node *&root)
{
    int balanceFactor = getHeight(root->pLeft) - getHeight(root->pRight);
    if (balanceFactor > 1)
    {
        if (getHeight(root->pLeft->pLeft) >= getHeight(root->pLeft->pRight))
            rotateRight(root);
        else
        {
            rotateLeft(root->pLeft);
            rotateRight(root);
        }
    }
    else if (balanceFactor < -1)
    {
        if (getHeight(root->pRight->pRight) >= getHeight(root->pRight->pLeft))
            rotateLeft(root);
        else
        {
            rotateRight(root->pRight);
            rotateLeft(root);
        }
    }
}

void insertRec(Node *&root, const T &value)
{
    if (root == NULL)
        root = new Node(value);
    else if (value < root->data)
        insertRec(root->pLeft, value);
    else
        insertRec(root->pRight, value);
    balance(root);
}

void insert(const T &value)
{
    insertRec(this->root, value);
}

// 4444444444444444444444444444444444444444444444444
// 4444444444444444444444444444444444444444444444444
Node *rotateLeft(Node *node)
{
    Node *temp = node->pRight;
    node->pRight = temp->pLeft;
    temp->pLeft = node;
    return temp;
}

// Hàm xoay phải tại một nút
Node *rotateRight(Node *node)
{
    Node *temp = node->pLeft;
    node->pLeft = temp->pRight;
    temp->pRight = node;
    return temp;
}

Node *balance(Node *node)
{
    int balance = getHeightRec(node->pLeft) - getHeightRec(node->pRight);
    if (balance > 1)
    {
        if (getHeightRec(node->pLeft->pLeft) >= getHeightRec(node->pLeft->pRight))
            node = rotateRight(node);
        else
        {
            node->pLeft = rotateLeft(node->pLeft);
            node = rotateRight(node);
        }
    }
    else if (balance < -1)
    {
        if (getHeightRec(node->pRight->pRight) >= getHeightRec(node->pRight->pLeft))
            node = rotateLeft(node);
        else
        {
            node->pRight = rotateRight(node->pRight);
            node = rotateLeft(node);
        }
    }
    return node;
}

Node *insertRec(Node *node, const T &value)
{
    if (node == NULL)
        return new Node(value);
    else if (value < node->data)
        node->pLeft = insertRec(node->pLeft, value);
    else
        node->pRight = insertRec(node->pRight, value);
    return balance(node);
}

void insert(const T &value)
{
    root = insertRec(root, value);
}

// 5555555555555555555555555555555555555555555555555
// 5555555555555555555555555555555555555555555555555
Node *rotateRight1(Node *a)
{
    Node *b = a->pLeft;
    Node *c = b->pRight;
    a->pLeft = c;
    b->pRight = a;
    return b;
}

Node *rotateLeft1(Node *a)
{
    Node *b = a->pRight;
    Node *c = b->pLeft;
    a->pRight = c;
    b->pLeft = a;
    return b;
}
int getHeightRec1(Node *node)
{
    if (node == NULL)
        return 0;
    int lh = getHeightRec1(node->pLeft);
    int rh = getHeightRec1(node->pRight);
    return (lh > rh ? lh : rh) + 1;
}
int getBalance1(Node *subroot)
{
    if (!subroot)
        return 0;
    return getHeightRec1(subroot->pLeft) - getHeightRec1(subroot->pRight);
}
Node *minValueNode(Node *node)
{
    Node *current = node;

    while (current->pRight != NULL)
        current = current->pRight;

    return current;
}
Node *deleteNode(Node *root, const T &key)
{

    if (root == NULL)
        return root;

    if (key < root->data)
        root->pLeft = deleteNode(root->pLeft, key);

    else if (key > root->data)
        root->pRight = deleteNode(root->pRight, key);

    else
    {
        if ((root->pLeft == NULL) ||
            (root->pRight == NULL))
        {
            Node *temp = root->pLeft ? root->pLeft : root->pRight;
            if (temp == NULL)
            {
                temp = root;
                root = NULL;
            }
            else
                *root = *temp;

            free(temp);
        }
        else
        {
            Node *temp = minValueNode(root->pLeft);

            root->data = temp->data;

            root->pLeft = deleteNode(root->pLeft,
                                     temp->data);
        }
    }

    if (root == NULL)
        return root;

    int balance = getBalance1(root);

    if (balance > 1 &&
        getBalance1(root->pLeft) >= 0)
        return rotateRight1(root);

    if (balance > 1 &&
        getBalance1(root->pLeft) < 0)
    {
        root->pLeft = rotateLeft1(root->pLeft);
        return rotateRight1(root);
    }

    if (balance < -1 &&
        getBalance1(root->pRight) <= 0)
        return rotateLeft1(root);

    if (balance < -1 &&
        getBalance1(root->pRight) > 0)
    {
        root->pRight = rotateRight1(root->pRight);
        return rotateLeft1(root);
    }

    return root;
}

void remove(const T &value)
{
    this->root = deleteNode(this->root, value);
}

// 6666666666666666666666666666666666666666666666666
// 6666666666666666666666666666666666666666666666666
Node *rotateRight1(Node *a)
{
    Node *b = a->pLeft;
    Node *c = b->pRight;
    a->pLeft = c;
    b->pRight = a;
    return b;
}

Node *rotateLeft1(Node *a)
{
    Node *b = a->pRight;
    Node *c = b->pLeft;
    a->pRight = c;
    b->pLeft = a;
    return b;
}
int getHeightRec1(Node *node)
{
    if (node == NULL)
        return 0;
    int lh = getHeightRec1(node->pLeft);
    int rh = getHeightRec1(node->pRight);
    return (lh > rh ? lh : rh) + 1;
}
int getBalance1(Node *subroot)
{
    if (!subroot)
        return 0;
    return getHeightRec1(subroot->pLeft) - getHeightRec1(subroot->pRight);
}
Node *minValueNode(Node *node)
{
    Node *current = node;

    while (current->pRight != NULL)
        current = current->pRight;

    return current;
}
Node *deleteNode(Node *root, const T &key)
{

    if (root == NULL)
        return root;

    if (key < root->data)
        root->pLeft = deleteNode(root->pLeft, key);
    else if (key > root->data)
        root->pRight = deleteNode(root->pRight, key);
    else
    {
        if ((root->pLeft == NULL) ||
            (root->pRight == NULL))
        {
            Node *temp = root->pLeft ? root->pLeft : root->pRight;
            if (temp == NULL)
            {
                temp = root;
                root = NULL;
            }
            else
                *root = *temp;
            free(temp);
        }
        else
        {
            Node *temp = minValueNode(root->pLeft);
            root->data = temp->data;
            root->pLeft = deleteNode(root->pLeft,
                                     temp->data);
        }
    }

    if (root == NULL)
        return root;
    int balance = getBalance1(root);
    if (balance > 1 &&
        getBalance1(root->pLeft) >= 0)
        return rotateRight1(root);
    if (balance > 1 &&
        getBalance1(root->pLeft) < 0)
    {
        root->pLeft = rotateLeft1(root->pLeft);
        return rotateRight1(root);
    }
    if (balance < -1 &&
        getBalance1(root->pRight) <= 0)
        return rotateLeft1(root);
    if (balance < -1 &&
        getBalance1(root->pRight) > 0)
    {
        root->pRight = rotateRight1(root->pRight);
        return rotateLeft1(root);
    }

    return root;
}

void remove(const T &value)
{
    this->root = deleteNode(this->root, value);
}

// 7777777777777777777777777777777777777777777777777
// 7777777777777777777777777777777777777777777777777
// Hàm in cây theo thứ tự giữa (inorder)
void printInorder(Node *node)
{
    if (node == nullptr)
        return;
    printInorder(node->pLeft);
    cout << node->data << " ";
    printInorder(node->pRight);
}

void printInorder()
{
    printInorder(root);
}

bool search(const T &value, Node *node)
{
    if (node == nullptr)
        return false;
    else if (value == node->data)
        return true;
    else if (value < node->data)
        return search(value, node->pLeft);
    else
        return search(value, node->pRight);
}

bool search(const T &value)
{
    return search(value, root);
}
