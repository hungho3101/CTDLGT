// 1111111111111111111111111111111111111111111111111
// 1111111111111111111111111111111111111111111111111
int binarySearch(int arr[], int left, int right, int x)
{
    if (left > right)
        return -1;
    int mid = left + (right - left) / 2;
    cout << "We traverse on index: " << mid << endl;
    if (arr[mid] == x)
        return mid;
    else if (arr[mid] > x)
        return binarySearch(arr, left, mid - 1, x);
    else
        return binarySearch(arr, mid + 1, right, x);
}

// 2222222222222222222222222222222222222222222222222
// 2222222222222222222222222222222222222222222222222
int interpolationSearch(int arr[], int left, int right, int x)
{
    if (right >= left && x >= arr[left] && x <= arr[right])
    {
        int pos = left + (((double)(right - left) / (arr[right] - arr[left])) * (x - arr[left]));
        cout << "We traverse on index: " << pos << endl;
        if (arr[pos] == x)
            return pos;
        if (arr[pos] < x)
            return interpolationSearch(arr, pos + 1, right, x);
        return interpolationSearch(arr, left, pos - 1, x);
    }
    return -1;
}

// 3333333333333333333333333333333333333333333333333
// 3333333333333333333333333333333333333333333333333
int jumpSearch(int a[], int x, int n)
{
    int k = sqrt(n);
    int i = 0;
    while (i < n && a[i] < x)
    {
        cout << i << " ";
        i = i + k;
    }
    if (i < n)
        cout << i << " ";
    if (a[i] == x)
    {
        return i;
    }
    i = i - k;
    for (int j = 1; j < k; j++)
    {
        cout << i + j << " ";
        if (a[i + j] == x)
            return i + j;
    }
    return -1;
}

// 4444444444444444444444444444444444444444444444444
// 4444444444444444444444444444444444444444444444444
bool findPairs(int arr[], int n, pair<int, int> &pair1, pair<int, int> &pair2)
{
    map<int, pair<int, int>> Hash;

    for (int i = 0; i < n; ++i)
    {
        for (int j = i + 1; j < n; ++j)
        {
            int sum = arr[i] + arr[j];
            if (Hash.find(sum) == Hash.end())
            {
                Hash[sum] = make_pair(i, j);
            }
            else
            {
                pair<int, int> pp = Hash[sum];
                pair1 = make_pair(arr[pp.first], arr[pp.second]);
                pair2 = make_pair(arr[i], arr[j]);
                return true;
            }
        }
    }
    return false;
}
