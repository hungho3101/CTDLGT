//////////////////////////////////////////////////// CAU 1 ////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
void SLinkedList<T>::bubbleSort()
{
    if (head == nullptr || head->next == nullptr) // Nếu danh sách rỗng hoặc chỉ có một nút
        return;

    bool swapped;
    Node *ptr1;
    Node *lptr = nullptr;

    do
    {
        swapped = false;
        ptr1 = head;

        while (ptr1->next != lptr)
        {
            if (ptr1->data > ptr1->next->data)
            {
                T temp = ptr1->data;
                ptr1->data = ptr1->next->data;
                ptr1->next->data = temp;
                swapped = true;
            }
            ptr1 = ptr1->next;
        }
        lptr = ptr1;

        if (swapped) // Chỉ in danh sách sau mỗi lần sắp xếp nếu có sự hoán đổi
            printList();
    } while (swapped);
}

//////////////////////////////////////////////////// CAU 2 ////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <class T>
void Sorting<T>::selectionSort(T *start, T *end)
{
    int size = end - start;
    for (int i = 0; i < size - 1; i++)
    {
        // Find the minimum element in unsorted array
        int min_idx = i;
        for (int j = i + 1; j < size; j++)
            if (start[j] < start[min_idx])
                min_idx = j;

        // Swap the found minimum element with the first element of unsorted array
        swap(start[min_idx], start[i]);

        // Print array after each selection
        printArray(start, end);
    }
}

//////////////////////////////////////////////////// CAU 3 ////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
static void sortSegment(T *start, T *end, int segment_idx, int cur_segment_total)
{
    for (int i = segment_idx; i < end - start; i += cur_segment_total)
    {
        T key = start[i];
        int j = i - cur_segment_total;
        while (j >= 0 && start[j] > key)
        {
            start[j + cur_segment_total] = start[j];
            j -= cur_segment_total;
        }
        start[j + cur_segment_total] = key;
    }
}

static void ShellSort(T *start, T *end, int *num_segment_list, int num_phases)
{
    for (int phase = num_phases - 1; phase >= 0; phase--)
    {
        int num_segments = num_segment_list[phase];
        for (int segment_idx = 0; segment_idx < num_segments; segment_idx++)
        {
            sortSegment(start, end, segment_idx, num_segments);
        }
        cout << num_segments << " segments: ";
        printArray(start, end);
    }
}
